---
# Install Docker in rootless mode
# See: https://rootlesscontaine.rs

- name: Install Debian family packages
  ansible.builtin.apt:
    name:
      - acl
      - dbus-user-session
      - uidmap
    state: present

- name: Add rootless user
  when:
    - docker_rootless_create_user_and_group is defined
    - docker_rootless_create_user_and_group
  block:
    - name: Add group {{ docker_rootless_group }}
      ansible.builtin.group:
        name: "{{ docker_rootless_group }}"
        gid: "{{ docker_rootless_gid }}"
        system: true
        state: present

    - name: Add user {{ docker_rootless_user }}
      ansible.builtin.user:
        name: "{{ docker_rootless_user }}"
        comment: docker engine owner
        uid: "{{ docker_rootless_uid }}"
        group: "{{ docker_rootless_group }}"
        home: /var/lib/{{ docker_rootless_user }}
        shell: /usr/bin/bash
        system: true
        state: present
      register: docker_rootless_user_info

    - name: Print rootless user info
      ansible.builtin.debug:
        var: docker_rootless_user_info
        verbosity: 1

- name: Assign a subordinate IDs range
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    line: "{{ docker_rootless_user }}:231072:65536"
  with_items:
    - /etc/subuid
    - /etc/subgid

# TODO: enable

# - name: Service systemd-logind start
#   ansible.builtin.systemd:
#     name: systemd-logind
#     state: started

- name: Enable a persistent user session for the Docker user
  ansible.builtin.command:
    cmd: loginctl enable-linger {{ docker_rootless_user }}
    # creates: /var/lib/systemd/linger/{{ docker_rootless_user }}
  changed_when: true

- name: Enable a persistent user session for the Docker user
  deadnews.util.linger:
    user: "{{ docker_rootless_user }}"
    state: enabled

- name: Set environment variables in bash_profile for the Docker user
  ansible.builtin.copy:
    src: files/bash_profile.sh
    dest: "{{ docker_rootless_user_home }}/.bash_profile"
    owner: "{{ docker_rootless_user }}"
    group: "{{ docker_rootless_group }}"
    mode: "0600"

- name: Install Docker in rootless mode
  become: true
  become_user: "{{ docker_rootless_user }}"
  become_flags: --login
  block:
    - name: Run the rootless docker checker
      ansible.builtin.command:
        cmd: /usr/bin/dockerd-rootless-setuptool.sh check
        creates: "{{ docker_rootless_user_home }}/.docker/config.json"

    - name: Run the rootless docker installer
      ansible.builtin.command:
        cmd: /usr/bin/dockerd-rootless-setuptool.sh install
        creates: "{{ docker_rootless_user_home }}/.docker/config.json"

- name: Expose privileged ports (< 1024) on rootlesskit binary
  community.general.capabilities:
    path: /usr/bin/rootlesskit
    capability: cap_net_bind_service=ep
    state: present
  notify:
    - (Handler) Restart rootless docker.service
  when:
    - docker_rootless_expose_privileged_ports is defined
    - docker_rootless_expose_privileged_ports

- name: Create Docker configs and Verify that Docker daemon is responding
  become: true
  become_user: "{{ docker_rootless_user }}"
  become_flags: --login
  block:
    # TODO: try include_role

    - name: Show the current user using ansible_env.USER
      ansible.builtin.debug:
        var: ansible_env.USER
        verbosity: 1

    - name: Create Docker configs
      ansible.builtin.import_role:
        name: deadnews.util.docker
        tasks_from: configs

    - name: Flush handlers after deployment
      ansible.builtin.meta: flush_handlers

    - name: Ensure that Docker service is started and enabled
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
        scope: user
      loop:
        - docker.service

    - name: Verify that Docker daemon is responding
      ansible.builtin.command:
        cmd: docker info
      changed_when: false

- name: Make sure the root level Docker service is stopped and disabled
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
    scope: system
  loop:
    - docker.service
    - docker.socket
