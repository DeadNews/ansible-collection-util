---
# Deploy Docker Compose projects (with docker compose v2)

- name: Create directory for the Docker Compose project {{ docker_compose_project }}
  ansible.builtin.file:
    path: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    state: directory
    mode: "0700"

- name: Copy files to the Docker Compose project {{ docker_compose_project }}
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}/{{ item.dest | default(item.src.split('/')[-1]) }}"
    mode: "{{ item.mode | default('0600') }}"
  loop: "{{ docker_compose_copy }}"
  when: docker_compose_copy is defined

- name: Render templates to the Docker Compose project {{ docker_compose_project }}
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}/{{ item.dest | default((item.src.split('/')[-1]).split('.j2')[0]) }}"
    mode: "{{ item.mode | default('0600') }}"
  loop: "{{ docker_compose_template }}"
  when: docker_compose_template is defined

- name: Find files in the Docker Compose project {{ docker_compose_project }}
  ansible.builtin.command:
    cmd: ls -lha "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
  changed_when: false
  register: ls_output
  when:
    - ansible_verbosity > 0

- name: Show found files in the Docker Compose project
  ansible.builtin.debug:
    var: ls_output.stdout_lines
    verbosity: 1

- name: Pull images for the Docker Compose project {{ docker_compose_project }}
  community.docker.docker_compose_v2_pull:
    project_src: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
  register: pull_output

- name: Show pull results
  ansible.builtin.debug:
    var: pull_output
  when:
    - pull_output.failed
    - or ansible_verbosity > 0

- name: Ensure the Docker Compose project is up-to-date and running ãƒ¼ {{ docker_compose_project }}
  community.docker.docker_compose_v2:
    project_src: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    pull: never
  register: compose_output

- name: Show compose results
  ansible.builtin.debug:
    var: compose_output
  when:
    - compose_output.failed
    - or ansible_verbosity > 0

- name: Ensure that Docker containers are running
  when:
    - docker_compose_containers_check is defined
    - docker_compose_containers_check
  block:
    - name: Get Docker container info
      community.docker.docker_container_info:
        name: "{{ item }}"
      register: container_info
      loop: "{{ docker_compose_containers_check }}"

    - name: Show Docker container info result
      ansible.builtin.debug:
        var: container_info
        verbosity: 2

    - name: Assert Docker container is running
      ansible.builtin.assert:
        that: item.container.State.Running
        quiet: true
      loop: "{{ container_info.results }}"
      loop_control:
        label: "{{ item.item }}"
