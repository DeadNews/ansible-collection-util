---
# Deploy Docker Compose project

- name: Create directory for the Docker Compose project {{ docker_compose_project }}
  ansible.builtin.file:
    path: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    state: directory
    mode: "0700"

- name: Create files in the Docker Compose project {{ docker_compose_project }}
  when: docker_compose_files is defined
  block:
    - name: Template files in the Docker Compose project {{ docker_compose_project }}
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}/{{ item.dest | default(item.src | basename | split('.j2') | first) }}"
        mode: "{{ item.mode | default('0600') }}"
        validate: "{{ item.validate | default('') }}"
      loop: "{{ docker_compose_files }}"
      notify:
        - (Handler) Down the Docker Compose project containers
      when:
        - item.src.endswith('.j2')

    - name: Copy files in the Docker Compose project {{ docker_compose_project }}
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}/{{ item.dest | default(item.src | basename) }}"
        mode: "{{ item.mode | default('0600') }}"
        validate: "{{ item.validate | default('') }}"
      loop: "{{ docker_compose_files }}"
      notify:
        - (Handler) Down the Docker Compose project containers
      when:
        - not item.src.endswith('.j2')

    - name: Validate the Docker Compose project {{ docker_compose_project }}
      ansible.builtin.command:
        cmd: docker compose -f "{{ docker_compose_target_dir }}/{{ docker_compose_project }}/docker-compose.yml" config
      changed_when: false
      register: config_output

    - name: Show files in the Docker Compose project {{ docker_compose_project }}
      when:
        - docker_compose_files_show is defined
        - docker_compose_files_show
      block:
        - name: Show the Docker Compose project in canonical format
          ansible.builtin.debug:
            var: config_output.stdout

        - name: List files in the Docker Compose project {{ docker_compose_project }}
          ansible.builtin.command:
            cmd: ls -lha "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
          changed_when: false
          register: ls_output

        - name: Show files in the Docker Compose project {{ docker_compose_project }}
          ansible.builtin.debug:
            var: ls_output.stdout

- name: Pull images for the Docker Compose project {{ docker_compose_project }}
  community.docker.docker_compose_v2_pull:
    project_src: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    policy: always
  notify:
    - (Handler) Down the Docker Compose project containers

- name: Flush handlers after deployment
  ansible.builtin.meta: flush_handlers

- name: Up the Docker Compose project containers ãƒ¼ {{ docker_compose_project }}
  community.docker.docker_compose_v2:
    project_src: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
    pull: never
    recreate: auto
    state: present
  register: compose_up

- name: Show results for docker compose up
  ansible.builtin.debug:
    var: compose_up.stderr

- name: Sleep for a specified time
  ansible.builtin.wait_for:
    timeout: "{{ docker_compose_sleep_time }}"
  when:
    - docker_compose_sleep_time is defined
    - docker_compose_sleep_time

- name: Show Docker Compose logs
  when:
    - docker_compose_logs is defined
    - docker_compose_logs
  block:
    - name: Get Docker Compose logs
      ansible.builtin.command:
        cmd: docker compose logs
        chdir: "{{ docker_compose_target_dir }}/{{ docker_compose_project }}"
      changed_when: false
      register: compose_logs

    - name: Show Docker compose logs
      ansible.builtin.debug:
        var: compose_logs.stdout

- name: Execute command in running Docker containers
  when:
    - docker_compose_containers_exec is defined
    - docker_compose_containers_exec
  block:
    - name: Execute command in Docker containers
      community.docker.docker_container_exec:
        container: "{{ item.container }}"
        command: "{{ item.cmd }}"
      changed_when: false
      register: containers_exec
      loop: "{{ docker_compose_containers_exec }}"

    - name: Show exec results
      ansible.builtin.debug:
        msg:
          rc: "{{ item.rc }}"
          stderr: "{{ item.stderr }}"
          stdout: "{{ item.stdout }}"
      loop: "{{ containers_exec.results }}"
      loop_control:
        label: "{{ item.item.container }} - {{ item.item.cmd }}"

- name: Show Docker containers logs
  when:
    - docker_compose_containers_logs is defined
    - docker_compose_containers_logs
  block:
    - name: Get Docker containers logs
      ansible.builtin.command:
        cmd: docker logs {{ item }}
      changed_when: false
      register: containers_logs
      loop: "{{ docker_compose_containers_logs }}"

    - name: Show Docker containers logs
      ansible.builtin.debug:
        msg:
          stderr: "{{ item.stderr }}"
          stdout: "{{ item.stdout }}"
      loop: "{{ containers_logs.results }}"
      loop_control:
        label: "{{ item.item }}"

- name: Ensure that Docker containers are running
  when:
    - docker_compose_containers_check is defined
    - docker_compose_containers_check
  block:
    - name: Get Docker container info
      community.docker.docker_container_info:
        name: "{{ item }}"
      register: containers_info
      loop: "{{ docker_compose_containers_check }}"

    - name: Show Docker container info
      ansible.builtin.debug:
        var: containers_info.results

    - name: Assert Docker container is running
      ansible.builtin.assert:
        that: item.container.State.Running
        quiet: true
      loop: "{{ containers_info.results }}"
      loop_control:
        label: "{{ item.item }}"
